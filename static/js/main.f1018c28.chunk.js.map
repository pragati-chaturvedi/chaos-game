{"version":3,"sources":["Home.js","Triangle.js","Hexagon.js","App.js","index.js"],"names":["Home","react_default","a","createElement","className","dist","to","Triangle","interval","_useState","useState","_useState2","Object","slicedToArray","state","setState","_useState3","_useState4","show","setShow","canvasRef","useRef","_useState5","_useState6","canvasCTX","setCanvasCTX","ctx","midPoint","x","window","innerWidth","y","innerHeight","edge","randomPoint","useEffect","canvas","current","getContext","width","height","translate","chaosGame","randomIndex","Math","floor","random","fillRect","onMouseUp","fillStyle","setInterval","ref","onClick","clearRect","clearInterval","Hexagon","mouseData","_useState7","_useState8","initialIndex","newPoint","App","react_router_dist","path","element","src_Home","src_Triangle_0","src_Hexagon_0","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"0TAqBeA,MAhBf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UAAI,cACJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACE,EAAA,EAAI,CAACC,GAAG,aACLL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAEtBH,EAAAC,EAAAC,cAACE,EAAA,EAAI,CAACC,GAAG,YACLL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oCCiHvBG,MA1Hf,WACE,IAAIC,EAASC,EACaC,mBAASF,GAASG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAArCK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAAAK,EACEN,oBAAS,GAAKO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEdG,EAAYC,iBAAO,MACzBC,EACkCZ,mBAAS,MAAKa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,EAAMF,EACNG,EAAW,CAAEC,EAAGC,OAAOC,WAAa,EAAGC,EAAGF,OAAOG,YAAc,GAC/DC,EAA4B,GAArBJ,OAAOG,YACdzB,EAAW,CAAQ,CAACoB,EAASC,EAAID,EAASI,EAAK,IAAOE,GAAiB,CAAEN,EAASC,EAAKK,EAAO,EAAMN,EAASI,EAAY,IAAPE,GAAyB,CAAEN,EAASC,EAAKK,EAAO,EAAMN,EAASI,EAAY,IAAPE,IACxLC,EAAc,CAAEN,EAAG,IAAKG,EAAG,KAQ/BI,oBAAU,WACR,IAAMC,EAAShB,EAAUiB,QACnBX,EAAMU,EAAOE,WAAW,MAC9BF,EAAOG,MAAQV,OAAOC,WACtBM,EAAOI,OAASX,OAAOG,YACvBN,EAAIe,UAAU,EAAwB,IAArBZ,OAAOG,aACxBP,EAAaC,IACZ,CAACN,IAwBJ,IAWMsB,EAAY,WAChB,IAAIC,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAClCZ,EAAc,CACZN,GAAIM,EAAYN,EAAIrB,EAASoC,GAAa,IAAM,EAChDZ,GAAIG,EAAYH,EAAIxB,EAASoC,GAAa,IAAM,GAElDjB,EAAIqB,SAASb,EAAYN,EAAGM,EAAYH,EAAG,EAAG,IAmBhD,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZc,GAAQjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEzB4C,UAAW,WAtCftB,EAAIuB,UAAY,QAEhBvB,EAAIqB,SAASxC,EAAS,GAAG,GAAIA,EAAS,GAAG,GAAI,EAAG,GAChDmB,EAAIqB,SAASxC,EAAS,GAAG,GAAIA,EAAS,GAAG,GAAI,EAAG,GAChDmB,EAAIqB,SAASxC,EAAS,GAAG,GAAIA,EAAS,GAAG,GAAI,EAAG,GAehDC,EAAW0C,YAAYR,EAAW,KAClC3B,EAASP,GAxDTW,GAASD,KA2EN,UACDjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAS,wBAEzBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAChB+C,IAAK/B,KAOTnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAI,CAACC,GAAG,KACPL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAa,WAEjCH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBgD,QAAS,WACPjC,GAAQ,GAlCJK,EACR6B,UACF,EACA,EACAjC,EAAUiB,QAAQE,MAClBnB,EAAUiB,QAAQG,QAEpBc,cAAcxC,KA8BT,mBCKMyC,MAvHf,WACI,IAAI/C,EAASC,EACaC,mBAASF,GAASG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAArCK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAAAK,EACEN,oBAAS,GAAKO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAAAK,EACcZ,mBAAS,CAAEkB,EAAG,EAAGG,EAAG,IAAIR,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAnDkC,EAASjC,EAAA,GACVH,GADwBG,EAAA,GACZF,iBAAO,OACzBoC,EACkC/C,mBAAS,MAAKgD,EAAA9C,OAAAC,EAAA,EAAAD,CAAA6C,EAAA,GAAzCjC,EAASkC,EAAA,GAAEjC,EAAYiC,EAAA,GACxBhC,EAAMF,EAENG,GADiB6B,EAAU5B,EAAM4B,EAAUzB,EAChC,CAAEH,EAAGC,OAAOC,WAAa,EAAGC,EAAGF,OAAOG,YAAc,IAC/DC,EAA8B,GAArBJ,OAAOG,YAChBuB,EAAU,CAAQ,CAAC5B,EAASC,EAAGD,EAASI,EAAIE,GAAc,CAAEN,EAASC,EAAI,IAAOK,EAAQN,EAASI,EAAKE,EAAO,GAAM,CAAEN,EAASC,EAAI,IAAOK,EAAQN,EAASI,EAAKE,EAAO,GAAc,CAAEN,EAASC,EAAI,IAAOK,EAAQN,EAASI,EAAKE,EAAO,GAAM,CAAEN,EAASC,EAAI,IAAOK,EAAQN,EAASI,EAAKE,EAAO,GAAgB,CAACN,EAASC,EAAGD,EAASI,EAAIE,IAE5U0B,EAAef,KAAKC,MAAsB,EAAhBD,KAAKE,UAC/Bc,EAAW,CAACL,EAAQI,GAAc,GAAIJ,EAAQI,GAAc,IAMhExB,oBAAU,WACN,IAAMC,EAAShB,EAAUiB,QACnBX,EAAMU,EAAOE,WAAW,MAC9BF,EAAOG,MAAQV,OAAOC,WACtBM,EAAOI,OAASX,OAAOG,YACvBP,EAAaC,GACbA,EAAIe,UAAU,EAAwB,IAArBZ,OAAOG,cACzB,CAACZ,IAUJ,IAoBMsB,EAAY,WACd,IAAIC,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAClCc,EAAS,IAAoB,EAAdA,EAAS,GAAmC,EAA1BL,EAAQZ,GAAa,IAAU,EAChEiB,EAAS,IAAoB,EAAdA,EAAS,GAAmC,EAA1BL,EAAQZ,GAAa,IAAU,EAEhEjB,EAAIqB,SAASa,EAAS,GAAIA,EAAS,GAAI,EAAG,IAqB9C,OACI3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVc,GACGjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEd4C,UAAW,WAjDvBtB,EAAIuB,UAAY,QAGhBvB,EAAIqB,SAASQ,EAAQ,GAAG,GAAIA,EAAQ,GAAG,GAAI,EAAG,GAG9C7B,EAAIqB,SAASQ,EAAQ,GAAG,GAAIA,EAAQ,GAAG,GAAI,EAAG,GAG9C7B,EAAIqB,SAASQ,EAAQ,GAAG,GAAIA,EAAQ,GAAG,GAAI,EAAG,GAC9C7B,EAAIqB,SAASQ,EAAQ,GAAG,GAAIA,EAAQ,GAAG,GAAI,EAAG,GAG9C7B,EAAIqB,SAASQ,EAAQ,GAAG,GAAIA,EAAQ,GAAG,GAAI,EAAG,GAC9C7B,EAAIqB,SAASQ,EAAQ,GAAG,GAAIA,EAAQ,GAAG,GAAI,EAAG,GAc9C/C,EAAW0C,YAAYR,EAAW,KAClC3B,EAASP,GAnDTW,GAASD,KAwEA,UAELjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAS,wBAG3BH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SACd+C,IAAK/B,IAKTnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACE,EAAA,EAAI,CAACC,GAAG,KACLL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAa,WAEnCH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdgD,QAAS,WAELjC,GAAQ,GApCZK,EACR6B,UACA,EACA,EACAjC,EAAUiB,QAAQE,MAClBnB,EAAUiB,QAAQG,QAEtBc,cAAcxC,KAgCL,cC9FF+C,MAdf,WACE,OACE5D,EAAAC,EAAAC,cAACE,EAAA,EAAM,KACLJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2D,EAAA,EAAM,KACL7D,EAAAC,EAAAC,cAAC2D,EAAA,EAAK,CAACC,KAAK,IAAIC,QAAS,CAAC/D,EAAAC,EAAAC,cAAC8D,EAAI,SAC/BhE,EAAAC,EAAAC,cAAC2D,EAAA,EAAK,CAACC,KAAK,YAAYC,QAAS,CAAC/D,EAAAC,EAAAC,cAAC+D,EAAQ,SAC3CjE,EAAAC,EAAAC,cAAC2D,EAAA,EAAK,CAACC,KAAK,WAAWC,QAAS,CAAC/D,EAAAC,EAAAC,cAACgE,EAAO,aCXtCC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvE,EAAAC,EAAAC,cAACF,EAAAC,EAAMuE,WAAU,KACfxE,EAAAC,EAAAC,cAACuE,EAAG","file":"static/js/main.f1018c28.chunk.js","sourcesContent":["import React from 'react'\nimport './Home.css';\nimport { Link } from \"react-router-dom\";\n// import { useEffect } from \"react\";\n\nfunction Home() {\n    return (\n        <div className='home'>\n            <h1>Chaos Game</h1>\n            <div className='choices'>\n                <Link to='/Triangle'>\n                    <button className='triangle choice'></button>\n                </Link>\n                <Link to='/Hexagon'>\n                    <button className='hexagon choice'></button>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './Triangle.css'\n\nfunction Triangle() {\n  let interval;\n  const [state, setState] = useState(interval);\n  const [show, setShow] = useState(true);\n  // const [mouseData, setMouseData] = useState({ x: 0, y: 0 });\n  const canvasRef = useRef(null);\n  // const [color, setColor] = useState(\"#000000\");\n  const [canvasCTX, setCanvasCTX] = useState(null);\n  const ctx = canvasCTX;\n  const midPoint = { x: window.innerWidth / 2, y: window.innerHeight / 2 }\n  const edge = window.innerHeight * 0.8;\n  const Triangle = [/*top*/[midPoint.x, (midPoint.y - (0.58 * edge))], /*left*/[(midPoint.x - (edge / 2)), (midPoint.y + (edge * 0.29))], /*right*/[(midPoint.x + (edge / 2)), (midPoint.y + (edge * 0.29))]];\n  let randomPoint = { x: 954, y: 387 }\n\n  // console.log(ctx)\n\n  function changeState() {\n    setShow(!show);\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    ctx.translate(0, window.innerHeight * 0.12);\n    setCanvasCTX(ctx);\n  }, [canvasRef]);\n\n\n\n  // const SetPos = (e) => {\n  //   setMouseData({\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  //   // alert(`${e.clientX}, ${e.clientY}`);\n  // };\n\n\n  // const start = (e) => {\n  //   setMouseData({\n  //     x: e.clientX,\n  //     y: e.clientY,\n  //   });\n  //   randomPoint.x =  \n  //   randomPoint.y =  \n  //   alert();\n  //   setInterval(chaosGame, 1)\n  // }\n\n  const Draw = () => {\n\n    ctx.fillStyle = 'white';\n\n    ctx.fillRect(Triangle[0][0], Triangle[0][1], 3, 3);\n    ctx.fillRect(Triangle[1][0], Triangle[1][1], 3, 3);\n    ctx.fillRect(Triangle[2][0], Triangle[2][1], 3, 3);\n\n\n  }\n\n  const chaosGame = () => {\n    let randomIndex = Math.floor(Math.random() * 3);\n    randomPoint = {\n      x: (randomPoint.x + Triangle[randomIndex][0]) / 2,\n      y: (randomPoint.y + Triangle[randomIndex][1]) / 2\n    }\n    ctx.fillRect(randomPoint.x, randomPoint.y, 1, 1);\n  }\n\n  function start() {\n    interval = setInterval(chaosGame, 0.25);\n    setState(interval);\n  }\n\n  function stop() {\n    const ctx = canvasCTX;\n    ctx.clearRect(\n      0,\n      0,\n      canvasRef.current.width,\n      canvasRef.current.height,\n    );\n    clearInterval(state);\n  }\n\n  return (\n    <div className=\"Triangle\">\n      {show && <button className='startButton'\n        // onMouseEnter={(e) => { Draw() }}\n        onMouseUp={() => { Draw(); start(); changeState(); }}\n      > START</button>}\n      <div className='headerDiv'>\n        <h1 className=\"header\">Let the Chaos Begin</h1>\n      </div>\n      <div>\n        <canvas className='canvas'\n          ref={canvasRef}\n        // onMouseMove={(e) => { SetPos(e); Draw() }}\n        // onMouseDown={(e) => { SetPos(e); start() }}\n        ></canvas>\n      </div>\n\n\n      <div className=\"controlpanel\">\n        <Link to='/'>\n          <button className=\"homeButton\">&#8249;</button>\n        </Link>\n        <button className='clearButton'\n          onClick={() => {\n            setShow(true);\n            stop();\n          }}\n        >\n          &#10226;\n        </button>\n      </div>\n    </div >\n  );\n}\n\nexport default Triangle;\n","import React from 'react'\nimport { useEffect, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './Hexagon.css'\n\nfunction Hexagon() {\n    let interval;\n    const [state, setState] = useState(interval);\n    const [show, setShow] = useState(true);\n    const [mouseData, setMouseData] = useState({ x: 0, y: 0 });\n    const canvasRef = useRef(null);\n    // const [color, setColor] = useState(\"#000000\");\n    const [canvasCTX, setCanvasCTX] = useState(null);\n    const ctx = canvasCTX;\n    let randomPoint = { x: mouseData.x, y: mouseData.y };\n    const midPoint = { x: window.innerWidth / 2, y: window.innerHeight / 2 }\n    const edge = ((window.innerHeight * 0.4));\n    const Hexagon = [/*top*/[midPoint.x, midPoint.y - edge],/*left*/[(midPoint.x - 0.86 * edge), (midPoint.y - (edge / 2))], [(midPoint.x - 0.86 * edge), (midPoint.y + (edge / 2))],/*right*/[(midPoint.x + 0.86 * edge), (midPoint.y - (edge / 2))], [(midPoint.x + 0.86 * edge), (midPoint.y + (edge / 2))], /*bottom*/[midPoint.x, midPoint.y + edge]];\n\n    let initialIndex = Math.floor(Math.random() * 6);\n    let newPoint = [Hexagon[initialIndex][0], Hexagon[initialIndex][1]];\n\n    function changeState() {\n        setShow(!show);\n    }\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        setCanvasCTX(ctx);\n        ctx.translate(0, window.innerHeight * 0.05);\n    }, [canvasRef]);\n\n    // const SetPos = (e) => {\n    //     setMouseData({\n    //         x: e.clientX,\n    //         y: e.clientY,\n    //     });\n    //     // alert(e.clientX e.clientY);\n    // };\n\n    const Draw = () => {\n\n        ctx.fillStyle = 'white';\n\n        //top\n        ctx.fillRect(Hexagon[0][0], Hexagon[0][1], 3, 3);\n\n        //bottom\n        ctx.fillRect(Hexagon[5][0], Hexagon[5][1], 3, 3);\n\n        //left\n        ctx.fillRect(Hexagon[1][0], Hexagon[1][1], 3, 3);\n        ctx.fillRect(Hexagon[2][0], Hexagon[2][1], 3, 3);\n\n        //right\n        ctx.fillRect(Hexagon[3][0], Hexagon[3][1], 3, 3);\n        ctx.fillRect(Hexagon[4][0], Hexagon[4][1], 3, 3);\n\n    }\n\n    const chaosGame = () => {\n        let randomIndex = Math.floor(Math.random() * 6);\n        newPoint[0] = (newPoint[0] * 1 + Hexagon[randomIndex][0] * 2) / 3;\n        newPoint[1] = (newPoint[1] * 1 + Hexagon[randomIndex][1] * 2) / 3;\n\n        ctx.fillRect(newPoint[0], newPoint[1], 1, 1);\n\n    }\n\n    function start() {\n        interval = setInterval(chaosGame, 0.25);\n        setState(interval);\n    }\n\n    function stop() {\n        const ctx = canvasCTX;\n        ctx.clearRect(\n            0,\n            0,\n            canvasRef.current.width,\n            canvasRef.current.height,\n        );\n        clearInterval(state);\n    }\n\n\n    return (\n        <div className=\"Hexagon\">\n            {show &&\n                <button className='startButton'\n                    // onMouseEnter={(e) => { Draw() }}\n                    onMouseUp={() => { Draw(); start(); changeState(); }}\n                > START</button>}\n\n            <div className='headerDiv'>\n                <h1 className=\"header\">Let the Chaos Begin</h1>\n            </div>\n\n            <canvas className='canvas'\n                ref={canvasRef}\n            // onMouseEnter={(e) => { Draw() }}\n            // onMouseDown={(e) => { SetPos(e); start() }}\n            ></canvas>\n\n            <div className=\"controlpanel\">\n                <Link to='/'>\n                    <button className='homeButton'>&#8249;</button>\n                </Link>\n                <button className='clearButton'\n                    onClick={() => {\n\n                        setShow(true);\n                        stop()\n                    }}\n                > &#10226;\n                </button>\n            </div>\n        </div >\n    );\n}\n\nexport default Hexagon\n\n        // if (newPoint[0] <= 727.8 && newPoint[1] <= 350) {\n        //     ctx.fillStyle = 'Brown'\n        // }\n        // else if (newPoint[0] <= 727.8) {\n        //     ctx.fillStyle = 'ORANGE';\n        // }\n        // else if ((newPoint[0]) <= 872.1 && newPoint[1] <= 266.6) {\n        //     ctx.fillStyle = 'RED';\n        // }\n        // else if (newPoint[0] <= 872.1) {\n        //     ctx.fillStyle = 'BLUE';\n        // }\n        // else if (newPoint[1] <= 350) {\n        //     ctx.fillStyle = 'Purple'\n        // }\n        // else {\n        //     ctx.fillStyle = 'GREEN'\n        // }\n\n        //COLOUR FILL ALONG X-AXIS\n        // if (newPoint[0] <= 327.8) {\n        //   ctx.fillStyle = 'ORANGE';\n        // }\n        // else if (newPoint[0] <= 472.1) {\n        //   ctx.fillStyle = 'BLUE';\n        // }\n        // else {\n        //   ctx.fillStyle = 'GREEN'\n        // }\n\n        //COLOUR FILL ALONG Y-AXIS\n        //   if (newPoint[1] <= (266.6 - 266.6/2)) {\n        //     ctx.fillStyle = 'ORANGE';\n        //   }\n        //   else if (newPoint[1] <= 266.6) {\n        //     ctx.fillStyle = '#787FF6';\n        //   }\n        //   else if (newPoint[1] <= (433.2- 433.2 / 2)) {\n        //     ctx.fillStyle = '#4ADEDE';\n        //   }\n        //   else if (newPoint[1] <= 433.2) {\n        //     ctx.fillStyle = 'BLUE';\n        //   }\n        //   else {\n        //     ctx.fillStyle = 'GREEN'\n        //   }\n        //   ctx.fillRect(newPoint[0], newPoint[1], 1, 1);\n        // }","import './App.css';\nimport React from 'react'\nimport { Helmet } from 'react-helmet';\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Home from \"./Home\"\nimport Triangle from './Triangle';\nimport Hexagon from './Hexagon';\n// import { useEffect } from \"react\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/\" element={[<Home />]} />\n          <Route path='/Triangle' element={[<Triangle />]} />\n          <Route path='/Hexagon' element={[<Hexagon />]} />\n        </Routes>\n      </div>\n    </Router>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: \n"],"sourceRoot":""}